{"abi":[{"type":"receive","stateMutability":"payable"},{"type":"function","name":"execute","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"executeWithSig","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"signer","type":"address","internalType":"address"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"getBytes","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getBytes","inputs":[{"name":"namespace","type":"bytes32","internalType":"bytes32"},{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getBytes32","inputs":[{"name":"namespace","type":"bytes32","internalType":"bytes32"},{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBytes32","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBytes32Batch","inputs":[{"name":"namespaces","type":"bytes32[]","internalType":"bytes32[]"},{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"values","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"},{"type":"function","name":"getBytesBatch","inputs":[{"name":"namespaces","type":"bytes32[]","internalType":"bytes32[]"},{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"values","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"view"},{"type":"function","name":"isValidSigner","inputs":[{"name":"signer","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setBytes","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"},{"name":"value","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytes32","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"},{"name":"value","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytes32Batch","inputs":[{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"},{"name":"values","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytesBatch","inputs":[{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"},{"name":"values","type":"bytes[]","internalType":"bytes[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"state","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"token","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"Executed","inputs":[{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"data","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"nonce","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"ExecutedWithSig","inputs":[{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"data","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"nonce","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"deadline","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"signer","type":"address","indexed":true,"internalType":"address"},{"name":"signature","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"execute(address,uint256,bytes)":"b61d27f6","executeWithSig(address,uint256,bytes,address,uint256,bytes)":"bff571ef","getBytes(bytes32)":"c031a180","getBytes(bytes32,bytes32)":"c7750f29","getBytes32(bytes32)":"a6ed563e","getBytes32(bytes32,bytes32)":"37d9d7fc","getBytes32Batch(bytes32[],bytes32[])":"decd4201","getBytesBatch(bytes32[],bytes32[])":"90e2f939","isValidSigner(address,bytes)":"523e3260","owner()":"8da5cb5b","setBytes(bytes32,bytes)":"2e28d084","setBytes32(bytes32,bytes32)":"4e91db08","setBytes32Batch(bytes32[],bytes32[])":"8acce2c2","setBytesBatch(bytes32[],bytes[])":"b1e2a194","state()":"c19d93fb","supportsInterface(bytes4)":"01ffc9a7","token()":"fc0c546a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ExecutedWithSig\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeWithSig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"namespaces\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"getBytes32Batch\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"namespaces\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"getBytesBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"setBytes32Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"name\":\"setBytesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"IPAccount is a token-bound account that adopts the EIP-6551 standard. These accounts are deployed at deterministic addresses through the official 6551 account registry. As a deployed smart contract, IPAccount can store IP-related information, like ownership of other NFTs such as license NFT or Royalty NFT. IPAccount can interact with modules by making calls as a normal transaction sender. This allows for seamless operations on the state and data of IP. IPAccount is core identity for all actions.\",\"events\":{\"Executed(address,uint256,bytes,bytes32)\":{\"params\":{\"data\":\"The data sent along with the transaction.\",\"nonce\":\"The nonce of the transaction.\",\"to\":\"The recipient of the transaction.\",\"value\":\"The amount of Ether sent.\"}},\"ExecutedWithSig(address,uint256,bytes,bytes32,uint256,address,bytes)\":{\"params\":{\"data\":\"The data sent along with the transaction.\",\"deadline\":\"The deadline of the transaction signature.\",\"nonce\":\"The nonce of the transaction.\",\"signature\":\"The signature of the transaction, EIP-712 encoded.\",\"signer\":\"The signer of the transaction.\",\"to\":\"The recipient of the transaction.\",\"value\":\"The amount of Ether sent.\"}}},\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes)\":{\"params\":{\"data\":\"The data to send along with the transaction.\",\"to\":\"The recipient of the transaction.\",\"value\":\"The amount of Ether to send.\"},\"returns\":{\"_0\":\"result The return data from the transaction.\"}},\"executeWithSig(address,uint256,bytes,address,uint256,bytes)\":{\"params\":{\"data\":\"The data to send along with the transaction.\",\"deadline\":\"The deadline of the transaction signature.\",\"signature\":\"The signature of the transaction, EIP-712 encoded.\",\"signer\":\"The signer of the transaction.\",\"to\":\"The recipient of the transaction.\",\"value\":\"The amount of Ether to send.\"},\"returns\":{\"_0\":\"result The return data from the transaction.\"}},\"getBytes(bytes32)\":{\"details\":\"Retrieves a bytes value by a given key from the default namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\"},\"returns\":{\"_0\":\"The bytes value stored under the specified key.\"}},\"getBytes(bytes32,bytes32)\":{\"details\":\"Retrieves a bytes value by a given key from a specified namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\",\"namespace\":\"The namespace from which to retrieve the value.\"},\"returns\":{\"_0\":\"The bytes value stored under the specified key in the given namespace.\"}},\"getBytes32(bytes32)\":{\"details\":\"Retrieves a bytes32 value by a given key from the default namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\"},\"returns\":{\"_0\":\"The bytes32 value stored under the specified key.\"}},\"getBytes32(bytes32,bytes32)\":{\"details\":\"Retrieves a bytes32 value by a given key from a specified namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\",\"namespace\":\"The namespace from which to retrieve the value.\"},\"returns\":{\"_0\":\"The bytes32 value stored under the specified key in the given namespace.\"}},\"getBytes32Batch(bytes32[],bytes32[])\":{\"details\":\"The `namespaces` and `keys` arrays must be the same length.\",\"params\":{\"keys\":\"An array of `bytes32` keys for which values are to be retrieved.\",\"namespaces\":\"An array of `bytes32` representing the namespaces from which to retrieve the values.\"},\"returns\":{\"values\":\"An array of `bytes32` values retrieved from the specified keys within the given namespaces.\"}},\"getBytesBatch(bytes32[],bytes32[])\":{\"details\":\"Requires that the length of `namespaces` and `keys` arrays be the same to ensure correct data retrieval.\",\"params\":{\"keys\":\"An array of `bytes32` representing the keys corresponding to the values to be retrieved.\",\"namespaces\":\"An array of `bytes32` representing the namespaces from which values are to be retrieved.\"},\"returns\":{\"values\":\"An array of `bytes` containing the values associated with the specified keys across the given namespaces.\"}},\"isValidSigner(address,bytes)\":{\"params\":{\"data\":\"The data to check against\",\"signer\":\"The signer to check\"},\"returns\":{\"_0\":\"The function selector if the signer is valid, 0 otherwise\"}},\"owner()\":{\"returns\":{\"_0\":\"owner The address of the owner.\"}},\"setBytes(bytes32,bytes)\":{\"details\":\"Sets a bytes value under a given key within the default namespace, determined by `msg.sender`.\",\"params\":{\"key\":\"The key under which to store the value.\",\"value\":\"The bytes value to be stored.\"}},\"setBytes32(bytes32,bytes32)\":{\"details\":\"Sets a bytes32 value under a given key within the default namespace, determined by `msg.sender`.\",\"params\":{\"key\":\"The key under which to store the value.\",\"value\":\"The bytes32 value to be stored.\"}},\"setBytes32Batch(bytes32[],bytes32[])\":{\"details\":\"The function requires that the `keys` and `values` arrays have the same length for correct mapping.\",\"params\":{\"keys\":\"An array of `bytes32` keys under which the values will be stored.\",\"values\":\"An array of `bytes32` values to be stored under the specified keys.\"}},\"setBytesBatch(bytes32[],bytes[])\":{\"details\":\"The function requires that the arrays `keys` and `values` have the same length.\",\"params\":{\"keys\":\"An array of `bytes32` keys under which the `bytes` values will be stored.\",\"values\":\"An array of `bytes` values corresponding to the keys to be stored.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"token()\":{\"returns\":{\"_0\":\"chainId The EIP-155 ID of the chain the token exists on\",\"_1\":\"tokenContract The contract address of the token\",\"_2\":\"tokenId The ID of the token\"}}},\"title\":\"IIPAccount\",\"version\":1},\"userdoc\":{\"events\":{\"Executed(address,uint256,bytes,bytes32)\":{\"notice\":\"Emitted when a transaction is executed.\"},\"ExecutedWithSig(address,uint256,bytes,bytes32,uint256,address,bytes)\":{\"notice\":\"Emitted when a transaction is executed on behalf of the signer.\"}},\"kind\":\"user\",\"methods\":{\"execute(address,uint256,bytes)\":{\"notice\":\"Executes a transaction from the IP Account.\"},\"executeWithSig(address,uint256,bytes,address,uint256,bytes)\":{\"notice\":\"Executes a transaction from the IP Account on behalf of the signer.\"},\"getBytes32Batch(bytes32[],bytes32[])\":{\"notice\":\"Retrieves an array of `bytes32` values corresponding to specified keys across multiple namespaces.\"},\"getBytesBatch(bytes32[],bytes32[])\":{\"notice\":\"Retrieves an array of `bytes` values corresponding to an array of keys from specified namespaces.\"},\"isValidSigner(address,bytes)\":{\"notice\":\"Checks if the signer is valid for the given data\"},\"owner()\":{\"notice\":\"Returns the owner of the IP Account.\"},\"setBytes32Batch(bytes32[],bytes32[])\":{\"notice\":\"Sets an array of `bytes32` values for corresponding keys within the caller's (`msg.sender`) namespace.\"},\"setBytesBatch(bytes32[],bytes[])\":{\"notice\":\"Sets multiple `bytes` values for an array of keys within the namespace of the caller (`msg.sender`).\"},\"state()\":{\"notice\":\"Returns the IPAccount's internal nonce for transaction ordering.\"},\"token()\":{\"notice\":\"Returns the identifier of the non-fungible token which owns the account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/protocol-core-v1/contracts/interfaces/IIPAccount.sol\":\"IIPAccount\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@create3-deployer/=lib/protocol-core-v1/lib/create3-deployer/\",\":@openzeppelin-foundry-upgrades/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solady/=lib/protocol-core-v1/node_modules/solady/\",\":@storyprotocol/core/=lib/protocol-core-v1/contracts/\",\":create3-deployer/=lib/protocol-core-v1/lib/create3-deployer/\",\":ds-test/=lib/protocol-core-v1/node_modules/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/src/\",\":protocol-core-v1/=lib/protocol-core-v1/contracts/\",\":solady/=lib/protocol-core-v1/lib/create3-deployer/lib/solady/\",\":solidity-stringutils/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"lib/protocol-core-v1/contracts/interfaces/IIPAccount.sol\":{\"keccak256\":\"0x792db72e22e20af2122b5d6915d7e2d1b58901626469be2ad9eff822ea1f7853\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ba24de53704ffb85e412d91b507d37d1613c5d558d964b15159e3c370fffa368\",\"dweb:/ipfs/QmXnDrroZpbnspYrLszvtGSAGcTQ7FoiryBTCQuSv8NuQ5\"]},\"lib/protocol-core-v1/contracts/interfaces/IIPAccountStorage.sol\":{\"keccak256\":\"0x9f795cdfc55ff94db47f12cf4cf2c41a07cf5c4439b3583304d75fc0c695441c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1464c348739b3cac2d5af19b2f8b8cc5afda241e3203092b0a2a2d4e392fc4d7\",\"dweb:/ipfs/QmVEiKa48u8xUrkk8DUG8NpF6f5u5YXX4xnveGe5QCVRMe\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false},{"internalType":"bytes","name":"data","type":"bytes","indexed":false},{"internalType":"bytes32","name":"nonce","type":"bytes32","indexed":false}],"type":"event","name":"Executed","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false},{"internalType":"bytes","name":"data","type":"bytes","indexed":false},{"internalType":"bytes32","name":"nonce","type":"bytes32","indexed":false},{"internalType":"uint256","name":"deadline","type":"uint256","indexed":false},{"internalType":"address","name":"signer","type":"address","indexed":true},{"internalType":"bytes","name":"signature","type":"bytes","indexed":false}],"type":"event","name":"ExecutedWithSig","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"execute","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"signer","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"payable","type":"function","name":"executeWithSig","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes32","name":"namespace","type":"bytes32"},{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes32","name":"namespace","type":"bytes32"},{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32[]","name":"namespaces","type":"bytes32[]"},{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"getBytes32Batch","outputs":[{"internalType":"bytes32[]","name":"values","type":"bytes32[]"}]},{"inputs":[{"internalType":"bytes32[]","name":"namespaces","type":"bytes32[]"},{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"getBytesBatch","outputs":[{"internalType":"bytes[]","name":"values","type":"bytes[]"}]},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSigner","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes","name":"value","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"setBytes"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"setBytes32"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"bytes32[]","name":"values","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"setBytes32Batch"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"bytes[]","name":"values","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function","name":"setBytesBatch"},{"inputs":[],"stateMutability":"view","type":"function","name":"state","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"token","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"execute(address,uint256,bytes)":{"params":{"data":"The data to send along with the transaction.","to":"The recipient of the transaction.","value":"The amount of Ether to send."},"returns":{"_0":"result The return data from the transaction."}},"executeWithSig(address,uint256,bytes,address,uint256,bytes)":{"params":{"data":"The data to send along with the transaction.","deadline":"The deadline of the transaction signature.","signature":"The signature of the transaction, EIP-712 encoded.","signer":"The signer of the transaction.","to":"The recipient of the transaction.","value":"The amount of Ether to send."},"returns":{"_0":"result The return data from the transaction."}},"getBytes(bytes32)":{"details":"Retrieves a bytes value by a given key from the default namespace.","params":{"key":"The key whose value is to be retrieved."},"returns":{"_0":"The bytes value stored under the specified key."}},"getBytes(bytes32,bytes32)":{"details":"Retrieves a bytes value by a given key from a specified namespace.","params":{"key":"The key whose value is to be retrieved.","namespace":"The namespace from which to retrieve the value."},"returns":{"_0":"The bytes value stored under the specified key in the given namespace."}},"getBytes32(bytes32)":{"details":"Retrieves a bytes32 value by a given key from the default namespace.","params":{"key":"The key whose value is to be retrieved."},"returns":{"_0":"The bytes32 value stored under the specified key."}},"getBytes32(bytes32,bytes32)":{"details":"Retrieves a bytes32 value by a given key from a specified namespace.","params":{"key":"The key whose value is to be retrieved.","namespace":"The namespace from which to retrieve the value."},"returns":{"_0":"The bytes32 value stored under the specified key in the given namespace."}},"getBytes32Batch(bytes32[],bytes32[])":{"details":"The `namespaces` and `keys` arrays must be the same length.","params":{"keys":"An array of `bytes32` keys for which values are to be retrieved.","namespaces":"An array of `bytes32` representing the namespaces from which to retrieve the values."},"returns":{"values":"An array of `bytes32` values retrieved from the specified keys within the given namespaces."}},"getBytesBatch(bytes32[],bytes32[])":{"details":"Requires that the length of `namespaces` and `keys` arrays be the same to ensure correct data retrieval.","params":{"keys":"An array of `bytes32` representing the keys corresponding to the values to be retrieved.","namespaces":"An array of `bytes32` representing the namespaces from which values are to be retrieved."},"returns":{"values":"An array of `bytes` containing the values associated with the specified keys across the given namespaces."}},"isValidSigner(address,bytes)":{"params":{"data":"The data to check against","signer":"The signer to check"},"returns":{"_0":"The function selector if the signer is valid, 0 otherwise"}},"owner()":{"returns":{"_0":"owner The address of the owner."}},"setBytes(bytes32,bytes)":{"details":"Sets a bytes value under a given key within the default namespace, determined by `msg.sender`.","params":{"key":"The key under which to store the value.","value":"The bytes value to be stored."}},"setBytes32(bytes32,bytes32)":{"details":"Sets a bytes32 value under a given key within the default namespace, determined by `msg.sender`.","params":{"key":"The key under which to store the value.","value":"The bytes32 value to be stored."}},"setBytes32Batch(bytes32[],bytes32[])":{"details":"The function requires that the `keys` and `values` arrays have the same length for correct mapping.","params":{"keys":"An array of `bytes32` keys under which the values will be stored.","values":"An array of `bytes32` values to be stored under the specified keys."}},"setBytesBatch(bytes32[],bytes[])":{"details":"The function requires that the arrays `keys` and `values` have the same length.","params":{"keys":"An array of `bytes32` keys under which the `bytes` values will be stored.","values":"An array of `bytes` values corresponding to the keys to be stored."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"token()":{"returns":{"_0":"chainId The EIP-155 ID of the chain the token exists on","_1":"tokenContract The contract address of the token","_2":"tokenId The ID of the token"}}},"version":1},"userdoc":{"kind":"user","methods":{"execute(address,uint256,bytes)":{"notice":"Executes a transaction from the IP Account."},"executeWithSig(address,uint256,bytes,address,uint256,bytes)":{"notice":"Executes a transaction from the IP Account on behalf of the signer."},"getBytes32Batch(bytes32[],bytes32[])":{"notice":"Retrieves an array of `bytes32` values corresponding to specified keys across multiple namespaces."},"getBytesBatch(bytes32[],bytes32[])":{"notice":"Retrieves an array of `bytes` values corresponding to an array of keys from specified namespaces."},"isValidSigner(address,bytes)":{"notice":"Checks if the signer is valid for the given data"},"owner()":{"notice":"Returns the owner of the IP Account."},"setBytes32Batch(bytes32[],bytes32[])":{"notice":"Sets an array of `bytes32` values for corresponding keys within the caller's (`msg.sender`) namespace."},"setBytesBatch(bytes32[],bytes[])":{"notice":"Sets multiple `bytes` values for an array of keys within the namespace of the caller (`msg.sender`)."},"state()":{"notice":"Returns the IPAccount's internal nonce for transaction ordering."},"token()":{"notice":"Returns the identifier of the non-fungible token which owns the account"}},"version":1}},"settings":{"remappings":["@create3-deployer/=lib/protocol-core-v1/lib/create3-deployer/","@openzeppelin-foundry-upgrades/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@solady/=lib/protocol-core-v1/node_modules/solady/","@storyprotocol/core/=lib/protocol-core-v1/contracts/","create3-deployer/=lib/protocol-core-v1/lib/create3-deployer/","ds-test/=lib/protocol-core-v1/node_modules/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/src/","protocol-core-v1/=lib/protocol-core-v1/contracts/","solady/=lib/protocol-core-v1/lib/create3-deployer/lib/solady/","solidity-stringutils/=lib/protocol-core-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/protocol-core-v1/contracts/interfaces/IIPAccount.sol":"IIPAccount"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa","urls":["bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287","dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"],"license":"MIT"},"lib/protocol-core-v1/contracts/interfaces/IIPAccount.sol":{"keccak256":"0x792db72e22e20af2122b5d6915d7e2d1b58901626469be2ad9eff822ea1f7853","urls":["bzz-raw://ba24de53704ffb85e412d91b507d37d1613c5d558d964b15159e3c370fffa368","dweb:/ipfs/QmXnDrroZpbnspYrLszvtGSAGcTQ7FoiryBTCQuSv8NuQ5"],"license":"BUSL-1.1"},"lib/protocol-core-v1/contracts/interfaces/IIPAccountStorage.sol":{"keccak256":"0x9f795cdfc55ff94db47f12cf4cf2c41a07cf5c4439b3583304d75fc0c695441c","urls":["bzz-raw://1464c348739b3cac2d5af19b2f8b8cc5afda241e3203092b0a2a2d4e392fc4d7","dweb:/ipfs/QmVEiKa48u8xUrkk8DUG8NpF6f5u5YXX4xnveGe5QCVRMe"],"license":"BUSL-1.1"}},"version":1},"id":18}